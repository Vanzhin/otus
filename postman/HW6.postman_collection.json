{
	"info": {
		"_postman_id": "775ce309-717e-4d46-aaab-f7696c6de636",
		"name": "HW6",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24005342",
		"_collection_link": "https://crimson-sunset-192879.postman.co/workspace/Otus~79af5b78-5e31-42b0-bcfe-f367166c9c43/collection/24005342-775ce309-717e-4d46-aaab-f7696c6de636?action=share&source=collection_link&creator=24005342"
	},
	"item": [
		{
			"name": "Регистрация пользователя 1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - status\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.user_id).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data.user_id).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const rndInt = Math.floor(Math.random() * 100) + 1;",
							"const pass = '1234567890';",
							"",
							"pm.environment.set('user_1_email','test'+rndInt+'@test.ru');",
							"pm.environment.set('test_pass',pass);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"{{user_1_email}}\",\n    \"password\":\"{{test_pass}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/users",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Логин  пользователя 1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.environment.set('token_user_1', responseData.data.token);",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response JSON\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.data.token).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.refresh_token).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.refresh_token_expiration).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.message).to.be.a('null');",
							"});",
							"",
							"",
							"pm.test(\"Check if the 'result,' 'status,' 'data,' and 'message' fields are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('result');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"{{user_1_email}}\",\n    \"password\":\"{{test_pass}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/auth/token/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"token",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создать профиль пользователя 1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.environment.set('profile_user_1_ulid', responseData.data.ulid);",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"",
							"pm.test(\"Presence of result, status, data, and message fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('result');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('data');",
							"  pm.expect(responseData).to.have.property('message');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WF9MXSD\"}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"John\",\n    \"age\":100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/profile/add",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить профиль пользователя 1 Не авторизованный Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.expect(pm.response.code).to.equal(401);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WF9MXSD\"}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/profile/{{profile_user_1_ulid}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile",
						"{{profile_user_1_ulid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновить профиль пользователя 1 Не авторизованный Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.expect(pm.response.code).to.equal(401);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WF9MXSD\"}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"Pjotr3\",\n    \"age\":23\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/profile/{{profile_user_1_ulid}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile",
						"{{profile_user_1_ulid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить профиль пользователя 1 Авторизован 1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - ulid, name, and age\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.ulid).to.exist;",
							"    pm.expect(responseData.data.name).to.exist;",
							"    pm.expect(responseData.data.age).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Age is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.age).to.be.a('number').and.to.satisfy((age) => age >= 0, \"Age should be a non-negative integer\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WF9MXSD\"}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/profile/{{profile_user_1_ulid}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile",
						"{{profile_user_1_ulid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновить профиль пользователя 1 Авторизованный 1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - result, status, data, and message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.exist;",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Result is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.result).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"pm.test(\"Status is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.status).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Value should be a non-negative integer\");",
							"});",
							"",
							"pm.test(\"Ulid is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.data.ulid).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WF9MXSD\"}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"Pjotr3\",\n    \"age\":23\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/profile/{{profile_user_1_ulid}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile",
						"{{profile_user_1_ulid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить профиль пользователя 1 Авторизован 1 Обновленный Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - ulid, name, and age\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.ulid).to.exist;",
							"    pm.expect(responseData.data.name).to.exist;",
							"    pm.expect(responseData.data.age).to.exist;",
							"});",
							"",
							"pm.test(\"Response has the prorep data\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.name).to.be.equal('Pjotr3');",
							"    pm.expect(responseData.data.age).to.be.equal(23);",
							"});",
							"",
							"",
							"pm.test(\"Age is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.age).to.be.a('number').and.to.satisfy((age) => age >= 0, \"Age should be a non-negative integer\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WF9MXSD\"}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/profile/{{profile_user_1_ulid}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile",
						"{{profile_user_1_ulid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Регистрация пользователя 2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - status\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.user_id).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data.user_id).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const rndInt = Math.floor(Math.random() * 100) + 1;",
							"const pass = '1234567890';",
							"",
							"pm.environment.set('user_2_email','test'+rndInt+'@test.ru');",
							"pm.environment.set('test_pass',pass);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"{{user_2_email}}\",\n    \"password\":\"{{test_pass}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/users",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Логин  пользователя 2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.environment.set('token_user_2', responseData.data.token);",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response JSON\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.data.token).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.refresh_token).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.refresh_token_expiration).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.message).to.be.a('null');",
							"});",
							"",
							"",
							"pm.test(\"Check if the 'result,' 'status,' 'data,' and 'message' fields are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('result');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"{{user_2_email}}\",\n    \"password\":\"{{test_pass}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/auth/token/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"token",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить профиль пользователя 1 Авторизован 2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"  pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WF9MXSD\"}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/profile/{{profile_user_1_ulid}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile",
						"{{profile_user_1_ulid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновить профиль пользователя 1 Авторизованный 2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"  pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Result is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.result).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"pm.test(\"Status is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.status).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Value should be a non-negative integer\");",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WF9MXSD\"}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"Pjotr3\",\n    \"age\":23\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/profile/{{profile_user_1_ulid}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile",
						"{{profile_user_1_ulid}}"
					]
				}
			},
			"response": []
		}
	]
}