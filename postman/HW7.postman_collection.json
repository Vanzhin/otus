{
	"info": {
		"_postman_id": "b595929d-dd1a-497f-b13a-34644436e649",
		"name": "HW7",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24005342",
		"_collection_link": "https://crimson-sunset-192879.postman.co/workspace/Otus~79af5b78-5e31-42b0-bcfe-f367166c9c43/collection/24005342-b595929d-dd1a-497f-b13a-34644436e649?action=share&source=collection_link&creator=24005342"
	},
	"item": [
		{
			"name": "Регистрация пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response has the required field - status\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.user_id).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data.user_id).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"const responseData = pm.response.json();",
							"pm.environment.set('test_user_id', responseData.data.user_id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const rndInt = Math.floor(Math.random() * 100) + 1;",
							"const pass = '1234567890';",
							"",
							"pm.environment.set('user_1_email','test'+rndInt+'@test.ru');",
							"pm.environment.set('test_pass',pass);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"{{user_1_email}}\",\n    \"password\":\"{{test_pass}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/users",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Логин  пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.environment.set('token_user_1', responseData.data.token);",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response JSON\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.data.token).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.refresh_token).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.refresh_token_expiration).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.message).to.be.any;",
							"});",
							"",
							"",
							"pm.test(\"Check if the 'result,' 'status,' 'data,' and 'message' fields are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('result');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"{{user_1_email}}\",\n    \"password\":\"{{test_pass}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/auth/token/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"token",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Внести деньги на счет",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Verify the response schema for the presence of required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.exist;",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Result and message fields should be of type string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.result).to.be.a('string');",
							"    pm.expect(responseData.message).to.be.any;",
							"});",
							"",
							"",
							"pm.test(\"Status field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('number').and.to.satisfy((status) => status >= 0, \"Status should be a non-negative integer\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WFhujnb\"}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sum\": 1000,\n    \"document_id\":\"123\",\n    \"type\":\"transfer\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing/account/transaction",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"account",
						"transaction"
					]
				}
			},
			"response": []
		},
		{
			"name": "Посмотреть счет",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema for the presence of required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('result');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Account object within data should contain required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.account).to.be.an('object');",
							"    pm.expect(responseData.data.account).to.have.property('id');",
							"    pm.expect(responseData.data.account).to.have.property('user_id');",
							"    pm.expect(responseData.data.account).to.have.property('balance');",
							"});",
							"",
							"",
							"pm.test(\"Balance is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.account.balance).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"const responseData = pm.response.json();",
							"pm.environment.set('balance', responseData.data.account.balance);",
							"pm.environment.set('ok_summ', responseData.data.account.balance*0.8);",
							"pm.environment.set('false_summ', responseData.data.account.balance*1.1);",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WFhujnb\"}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing/account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Сделать заказ, на который хватает",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.exist;",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.data).to.exist;",
							"    pm.expect(responseData.message).to.be.any;",
							"});",
							"",
							"",
							"pm.test(\"Result is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.result).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Result should be a non-empty string\");",
							"});",
							"",
							"pm.test(\"Status is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.status).to.be.a('number').and.to.satisfy((status) => status >= 0, \"Status should be a non-negative integer\");",
							"});",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WFhujnb\"}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sum\": {{ok_summ}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/orders",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Посмотреть счет",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema for the presence of required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('result');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Account object within data should contain required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.account).to.be.an('object');",
							"    pm.expect(responseData.data.account).to.have.property('id');",
							"    pm.expect(responseData.data.account).to.have.property('user_id');",
							"    pm.expect(responseData.data.account).to.have.property('balance');",
							"});",
							"",
							"",
							"pm.test(\"Balance is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.account.balance).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"pm.test(\"Balance updated\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.account.balance).to.be.a('number').and.to.be.below(pm.environment.get('balance'));",
							"});",
							"",
							"const responseData = pm.response.json();",
							"pm.environment.set('balance', responseData.data.account.balance);",
							"pm.environment.set('ok_summ', responseData.data.account.balance*0.8);",
							"pm.environment.set('false_summ', responseData.data.account.balance*1.1);",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WFhujnb\"}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing/account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Посмотреть список сообщений",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response contains the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.notifications).to.be.an('array');",
							"    pm.expect(responseData.data.notifications).length>0;",
							"",
							"    responseData.data.notifications.forEach(notification => {",
							"        pm.expect(notification.ulid).to.exist;",
							"        pm.expect(notification.message).to.exist;",
							"        pm.expect(notification.user_ulid).to.exist;",
							"        pm.expect(notification.driver).to.exist;",
							"        pm.expect(notification.created_at).to.exist;",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"filter\": {\n        \"user_ulid\":\"{{test_user_id}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/notification/list",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notification",
						"list"
					],
					"query": [
						{
							"key": "page",
							"value": "1",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Сделать заказ, на который не хватает",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"",
							"pm.test(\"Presence of required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.exist;",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.data).to.exist;",
							"    pm.expect(responseData.message).to.any;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WFhujnb\"}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sum\": {{false_summ}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/orders",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Посмотреть счет",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema for the presence of required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('result');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Account object within data should contain required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.account).to.be.an('object');",
							"    pm.expect(responseData.data.account).to.have.property('id');",
							"    pm.expect(responseData.data.account).to.have.property('user_id');",
							"    pm.expect(responseData.data.account).to.have.property('balance');",
							"});",
							"",
							"",
							"pm.test(\"Balance is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.account.balance).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"pm.test(\"Balance not updated\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.account.balance).to.be.a('number').and.to.be.equal(pm.environment.get('balance'));",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_user_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "{\"ulid\":\"01J3WKC8BSGQQJGWQK8WFhujnb\"}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing/account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Посмотреть список сообщений Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"  });",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response contains the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.notifications).to.be.an('array');",
							"    pm.expect(responseData.data.notifications).length>1;",
							"",
							"    responseData.data.notifications.forEach(notification => {",
							"        pm.expect(notification.ulid).to.exist;",
							"        pm.expect(notification.message).to.exist;",
							"        pm.expect(notification.user_ulid).to.exist;",
							"        pm.expect(notification.driver).to.exist;",
							"        pm.expect(notification.created_at).to.exist;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"filter\": {\n        \"user_ulid\":\"{{test_user_id}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/notification/list",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notification",
						"list"
					],
					"query": [
						{
							"key": "page",
							"value": "1",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}